/**
 * ‰∫∫Áîü„Åä„Åã„Å≠Ë®∫Êñ≠ - JavaScript
 * 100ÁÇπ„ÅÆUI/UX‰ΩìÈ®ì„ÇíÊèê‰æõ„Åô„ÇãÈ´òÂìÅË≥™„Å™„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
 */

// ===== „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö =====
const APP_CONFIG = {
    VERSION: '3.0.0',
    STORAGE_KEY: 'lifetimeSimulatorData_v3',
    DEBOUNCE_DELAY: 300,
    ANIMATION_DURATION: 300,
    NOTIFICATION_DURATION: 4000,
    CALCULATION_DELAY: 1500,
    MAX_RETRIES: 3
};

// ===== „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Éá„Éº„Çø =====
const APP_DATA = {
    categories: [
        { id: "housing", name: "‰ΩèÂ±ÖË≤ª", icon: "üè†", placeholder: "8.0", max: 50, description: "ÂÆ∂Ë≥É„ÄÅ‰ΩèÂÆÖ„É≠„Éº„É≥„ÄÅÁÆ°ÁêÜË≤ª„ÄÅÂõ∫ÂÆöË≥áÁî£Á®é„Å™„Å©" },
        { id: "food", name: "È£üË≤ª", icon: "üçΩÔ∏è", placeholder: "6.0", max: 20, description: "Â§ñÈ£üË≤ª„ÄÅÈ£üÊùêË≤ª„ÄÅ„ÅäÂºÅÂΩì‰ª£„Å™„Å©" },
        { id: "utilities", name: "Ê∞¥ÈÅìÂÖâÁÜ±Ë≤ª", icon: "‚ö°", placeholder: "2.0", max: 10, description: "ÈõªÊ∞ó„ÄÅ„Ç¨„Çπ„ÄÅÊ∞¥ÈÅì„ÅÆÂü∫Êú¨ÊñôÈáë+‰ΩøÁî®Êñô" },
        { id: "communication", name: "ÈÄö‰ø°Ë≤ª", icon: "üì±", placeholder: "1.0", max: 5, description: "Êê∫Â∏ØÈõªË©±„ÄÅ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà„ÄÅÂõ∫ÂÆöÈõªË©±„Å™„Å©" },
        { id: "insurance", name: "‰øùÈô∫Êñô", icon: "üõ°Ô∏è", placeholder: "1.5", max: 10, description: "ÁîüÂëΩ‰øùÈô∫„ÄÅÂåªÁôÇ‰øùÈô∫„ÄÅÁÅ´ÁÅΩ‰øùÈô∫„Å™„Å©" },
        { id: "vehicle", name: "Ëá™ÂãïËªäÈñ¢ÈÄ£Ë≤ª", icon: "üöó", placeholder: "3.0", max: 10, description: "„É≠„Éº„É≥„ÄÅÈßêËªäÂ†¥‰ª£„ÄÅ‰øùÈô∫„ÄÅËªäÊ§ú„ÄÅ„Ç¨„ÇΩ„É™„É≥‰ª£„Å™„Å©" },
        { id: "education", name: "ÊïôËÇ≤„ÉªËá™Â∑±ÊäïË≥áË≤ª", icon: "üìö", placeholder: "1.0", max: 20, description: "Ëá™Ë∫´„ÅÆÂ≠¶Áøí„ÄÅÂ≠ê‰æõ„ÅÆÁøí„ÅÑ‰∫ãÔºàÂ≠¶Ë≤ªÊú¨‰ΩìÈô§„ÅèÔºâ„Å™„Å©" },
        { id: "subscriptions", name: "„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥", icon: "üì∫", placeholder: "0.3", max: 5, description: "ÂãïÁîª„ÉªÈü≥Ê•ΩÈÖç‰ø°„ÄÅ„Ç¢„Éó„É™„Å™„Å©" },
        { id: "others", name: "„Åù„ÅÆ‰ªñÂõ∫ÂÆöË≤ª", icon: "üì¶", placeholder: "1.0", max: 10, description: "„Åì„Å•„Åã„ÅÑ„ÄÅË∂£Âë≥„ÄÅÂÆöÊúüË≥ºÂÖ•„ÄÅ„Éö„ÉÉ„ÉàË≤ªÁî®„Å™„Å©" }
    ],
    lifeEvents: [
        { id: 1, key: "marriage", text: "ÁµêÂ©ö‰∫àÂÆö„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü", description: "Âπ≥ÂùáË≤ªÁî®ÔºöÁ¥Ñ300‰∏áÂÜÜÔºà‰∏ÄÊôÇË≤ªÁî®Ôºâ", icon: "üíç", cost: 300, isOneTime: true },
        { id: 2, key: "car", text: "Ëªä„ÅÆË≥ºÂÖ•‰∫àÂÆö„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü", description: "Ë≥ºÂÖ•Ë≤ªÁî®Ôºö10Âπ¥„Åî„Å®„Å´Á¥Ñ200-300‰∏áÂÜÜ + Á∂≠ÊåÅË≤ªÔºöÊúà3-5‰∏áÂÜÜÁ®ãÂ∫¶", icon: "üöó", cost: 250, recurringCostPerYear: 48, isOneTime: false, costInterval: 10 },
        { id: 3, key: "children", text: "Âá∫Áî£„ÉªÂ≠êËÇ≤„Å¶‰∫àÂÆö„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü", description: "Â≠êËÇ≤„Å¶Ë≤ªÁî®Ôºö1‰∫∫„ÅÇ„Åü„ÇäÁ¥Ñ1500-2000‰∏áÂÜÜÔºàÂ§ßÂ≠¶ÂçíÊ•≠„Åæ„ÅßÔºâ", icon: "üë∂", cost: 1800, hasDetail: true, detailSettingKey: 'childrenCountGroup' },
        { id: 4, key: "housing", text: "‰ΩèÂÆÖË≥ºÂÖ•‰∫àÂÆö„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü", description: "‰ΩèÂÆÖË≤ªÁî®ÔºöÁ¥Ñ3000-5000‰∏áÂÜÜ + Âõ∫ÂÆöË≥áÁî£Á®éÁ≠â", icon: "üè†", cost: 3500, hasDetail: true, detailSettingKey: 'housingAgeGroup', isOneTime: true },
        { id: 5, key: "caregiving", text: "Ë¶™„ÅÆ‰ªãË≠∑Ë≤ªÁî®„ÅÆÊ∫ñÂÇô„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü", description: "‰ªãË≠∑Ë≤ªÁî®Ôºö‰∏ÄÊôÇÈáë Á¥Ñ100‰∏áÂÜÜ„ÄÅÊúàÈ°ç Á¥Ñ8‰∏áÂÜÜÁ®ãÂ∫¶", icon: "üë¥", cost: 100, recurringCostPerYear: 96, isOneTime: false },
        { id: 6, key: "travel", text: "Êµ∑Â§ñÊóÖË°å„Å™„Å©„ÅÆÂ§ß„Åç„Å™Â®ØÊ•ΩË≤ª„ÇíËÄÉÊÖÆ„Åó„Åæ„Åô„ÅãÔºü", description: "‰æã: 5Âπ¥„Åî„Å®„Å´100‰∏áÂÜÜ„ÅÆÂ§ßÂûãÊóÖË°å„Å™„Å©", icon: "‚úàÔ∏è", cost: 100, isOneTime: false, costInterval: 5 },
        { id: 7, key: "nisa", text: "„Å§„Åø„Åü„Å¶NISA„Å™„Å©„ÅÆÊäïË≥á„ÇíË°å„ÅÑ„Åæ„Åô„ÅãÔºü", description: "Êúà„ÄÖ„ÅÆÁ©çÁ´ãÊäïË≥áÔºàÁµêÊûú„ÅØÈÅãÁî®Áõä„Å®„Åó„Å¶ÂèçÊò†Ôºâ", icon: "üìà", hasDetail: true, investment: true, detailSettingKey: 'nisaAmountGroup' }
    ],
    defaultAdvancedSettings: {
        retirementAge: 65,
        expectedLifeExpectancy: 95,
        investmentReturnRate: 3.0,
    },
    personalityTypes: {
        security: {
            name: "ÂÆâÂÆöÈáçË¶ñÂûã",
            description: "Â∞ÜÊù•„ÅÆÂÆâÂøÉ„Å®ÂÆâÂÆö„ÇíÊúÄÂÑ™ÂÖà„Åô„Çã",
            keywords: ["ÂÆâÂøÉ", "ÂÆâÂÆö", "Áõ§Áü≥", "Á¢∫ÂÆü", "Â†ÖÂÆü"]
        },
        growth: {
            name: "Ëá™Â∑±ÊäïË≥áÂûã",
            description: "„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó„ÇÑ„Ç≠„É£„É™„Ç¢ÂΩ¢Êàê„Å∏„ÅÆÊäïË≥á„ÇíÈáçË¶ñ„Åô„Çã",
            keywords: ["ÊàêÈï∑", "„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó", "„Ç≠„É£„É™„Ç¢", "Âêë‰∏ä", "Áô∫Â±ï"]
        },
        freedom: {
            name: "ÁèæÂú®ÂøóÂêëÂûã",
            description: "‰ªä„ÅÆÊ•Ω„Åó„Åø„ÇÑ‰ΩìÈ®ì„ÇíÂ§ßÂàá„Å´„Åô„Çã",
            keywords: ["Ëá™Áî±", "‰ΩìÈ®ì", "Ê•Ω„Åó„Åø", "‰ªä", "ÂÖÖÂÆü"]
        },
        contribution: {
            name: "Ë≤¢ÁåÆ„ÉªÂÆ∂ÊóèÂûã",
            description: "ÂÆ∂Êóè„ÇÑÂ§ßÂàá„Å™‰∫∫„Å®„ÅÆÊôÇÈñì„ÄÅÁ§æ‰ºöË≤¢ÁåÆ„ÇíÈáçË¶ñ„Åô„Çã",
            keywords: ["ÂÆ∂Êóè", "Ë≤¢ÁåÆ", "Â§ßÂàá„Å™‰∫∫", "ÁµÜ", "ÊîØ„ÅàÂêà„ÅÑ"]
        }
    }
};

// ===== „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Áä∂ÊÖã =====
class AppState {
    constructor() {
        this.currentStep = 1;
        this.farthestValidatedStep = 1;
        this.basicInfo = {
            birthday: null,
            income: null,
            occupation: '',
            nationalPensionÂÆüÁ∏æYears: 0,
            nationalPension‰∫àÂÆöYears: 20,
            employeePensionÂÆüÁ∏æYears: 0,
            employeePension‰∫àÂÆöYears: 20,
        };
        this.fixedCosts = {};
        this.lifeEvents = {};
        this.customLifeEvents = [];
        this.detailSettings = {
            childrenCount: 1,
            housingAge: 35,
            nisaAmount: 3.3
        };
        this.advancedSettings = { ...APP_DATA.defaultAdvancedSettings };
        this.results = {};
        this.validationErrors = new Map();
        this.isCalculating = false;
        this.financialPersonality = null;
    }
}

// ===== „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ =====
let appState = new AppState();
let lifetimeChart = null;
let debounceTimers = new Map();
let currentNotificationId = 0;

// ===== „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞ =====
const Utils = {
    debounce(key, func, delay = APP_CONFIG.DEBOUNCE_DELAY) {
        if (debounceTimers.has(key)) {
            clearTimeout(debounceTimers.get(key));
        }
        const timer = setTimeout(() => {
            func();
            debounceTimers.delete(key);
        }, delay);
        debounceTimers.set(key, timer);
    },
    getElement(id, required = true) {
        const element = document.getElementById(id);
        if (!element && required) {
            console.error(`Required element not found: ${id}`);
            return null;
        }
        return element;
    },
    parseNumber(value, defaultValue = 0, min = -Infinity, max = Infinity) {
        const num = parseFloat(value);
        if (isNaN(num)) return defaultValue;
        return Math.max(min, Math.min(max, num));
    },
    parseInt(value, defaultValue = 0, min = -Infinity, max = Infinity) {
        const num = parseInt(value, 10);
        if (isNaN(num)) return defaultValue;
        return Math.max(min, Math.min(max, num));
    },
    preciseAdd(a, b) {
        const factor = 100;
        return (Math.round(a * factor) + Math.round(b * factor)) / factor;
    },
    preciseMultiply(a, b) {
        const factor = 100;
        return (Math.round(a * factor) * b) / factor;
    },
    precisePercentage(value, total) {
        if (total === 0) return 0;
        return Math.round((value / total) * 1000) / 10;
    },
    calculateAge(birthDate) {
        if (!birthDate) return null;
        try {
            const today = new Date();
            const birth = new Date(birthDate);
            if (isNaN(birth.getTime())) return null;
            let age = today.getFullYear() - birth.getFullYear();
            const monthDiff = today.getMonth() - birth.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                age--;
            }
            return Math.max(0, age);
        } catch (e) {
            return null;
        }
    },
    formatCurrency(amount, unit = '‰∏áÂÜÜ') {
        if (typeof amount !== 'number' || isNaN(amount)) return '---';
        if (Math.abs(amount) >= 10000) {
            return `${(amount / 10000).toFixed(1)}ÂÑÑ${unit.replace('‰∏á', '')}`;
        }
        return `${Math.round(amount).toLocaleString()}${unit}`;
    },
    generateId() {
        return `_${Math.random().toString(36).substr(2, 9)}_${Date.now().toString(36)}`;
    },
    scrollToElement(element, offset = 0) {
        if (!element) return;
        const elementPosition = element.getBoundingClientRect().top + window.pageYOffset;
        window.scrollTo({
            top: elementPosition - offset,
            behavior: 'smooth'
        });
    },
    handleError(error, context = 'Unknown') {
        console.error(`Error in ${context}:`, error);
        NotificationManager.show('‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ', 'error');
    }
};

// ===== ÈÄöÁü•ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const NotificationManager = {
    show(message, type = 'info', duration = APP_CONFIG.NOTIFICATION_DURATION) {
        const existingNotification = document.querySelector('.notification');
        if(existingNotification) existingNotification.remove();

        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        notification.setAttribute('role', 'alert');

        const colors = { success: '#10b981', error: '#ef4444', warning: '#f59e0b', info: '#3b82f6' };
        const icons = { success: '‚úÖ', error: '‚ùå', warning: '‚ö†Ô∏è', info: '‚ÑπÔ∏è' };

        notification.innerHTML = `<span class="notification-icon">${icons[type]}</span> ${message}`;
        Object.assign(notification.style, {
            position: 'fixed', top: '20px', right: '20px', padding: '15px 20px', borderRadius: '8px',
            color: 'white', background: colors[type], zIndex: '10000', transform: 'translateX(120%)',
            opacity: '0', transition: 'all 0.4s ease', boxShadow: '0 4px 15px rgba(0,0,0,0.1)'
        });
        document.body.appendChild(notification);
        
        requestAnimationFrame(() => {
            notification.style.transform = 'translateX(0)';
            notification.style.opacity = '1';
        });

        setTimeout(() => {
            notification.style.transform = 'translateX(120%)';
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 400);
        }, duration);
    }
};

// ===== „Çπ„Éà„É¨„Éº„Ç∏ÁÆ°ÁêÜ =====
const StorageManager = {
    save(data) {
        try {
            const serializedData = JSON.stringify(data);
            localStorage.setItem(APP_CONFIG.STORAGE_KEY, serializedData);
        } catch (e) {
            console.error("Error saving to localStorage", e);
            NotificationManager.show("Ë®≠ÂÆö„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ", "error");
        }
    },
    load() {
        try {
            const data = localStorage.getItem(APP_CONFIG.STORAGE_KEY);
            return data ? JSON.parse(data) : null;
        } catch (e) {
            console.error("Error loading from localStorage", e);
            localStorage.removeItem(APP_CONFIG.STORAGE_KEY);
            return null;
        }
    },
    clear() {
        localStorage.removeItem(APP_CONFIG.STORAGE_KEY);
    }
};


// ===== UIÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const UIManager = {
    updateProgress() {
        const percentage = appState.currentStep * 20;
        Utils.getElement('progressFill').style.width = `${percentage}%`;
        Utils.getElement('progressPercentage').textContent = `${percentage}%`;
        Utils.getElement('progressSummary').textContent = `„Çπ„ÉÜ„ÉÉ„Éó ${appState.currentStep} / 5 „ÇíÂÖ•Âäõ‰∏≠`;
        this.updateStepLabels();
        this.updateMainSteps();
    },
    updateMainSteps() {
        const phaseMap = { 1: 1, 2: 2, 3: 2, 4: 2, 5: 3 };
        const currentPhase = phaseMap[appState.currentStep] || 1;
        document.querySelectorAll('.main-step').forEach((step, index) => {
            step.classList.toggle('active', index === currentPhase - 1);
        });
    },
    updateStepLabels() {
        document.querySelectorAll('.step-label').forEach(label => {
            const stepNum = Utils.parseInt(label.dataset.step);
            label.classList.remove('active', 'completed');
            label.disabled = stepNum > appState.farthestValidatedStep;
            if (stepNum === appState.currentStep) label.classList.add('active');
            else if (stepNum < appState.currentStep) label.classList.add('completed');
        });
    },
    showStep(stepNumber) {
        document.querySelectorAll('.step-section').forEach(s => s.classList.remove('active'));
        Utils.getElement(`step${stepNumber}`).classList.add('active');
        appState.currentStep = stepNumber;
        this.updateProgress();
    },
    showError(elementId, message) {
        const errorElement = Utils.getElement(`${elementId}Error`, false);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
        const inputElement = Utils.getElement(elementId, false);
        if (inputElement) inputElement.classList.add('error');
    },
    clearError(elementId) {
        const errorElement = Utils.getElement(`${elementId}Error`, false);
        if (errorElement) errorElement.style.display = 'none';
        const inputElement = Utils.getElement(elementId, false);
        if (inputElement) inputElement.classList.remove('error');
    },
    showLoading() {
        Utils.getElement('loadingAnimation').classList.add('active');
    },
    hideLoading() {
        Utils.getElement('loadingAnimation').classList.remove('active');
    },
    updatePlaceholders(showResults = false) {
        Utils.getElement('chartPlaceholder').style.display = showResults ? 'none' : 'flex';
        Utils.getElement('lifetimeChart').style.display = showResults ? 'block' : 'none';
        Utils.getElement('advicePlaceholder').style.display = showResults ? 'none' : 'flex';
        Utils.getElement('adviceContent').style.display = showResults ? 'grid' : 'none';
    },
    showQuickGuide() {
        const overlay = Utils.getElement("quickGuideOverlay", false);
        if (overlay && !localStorage.getItem("guideShown")) {
            overlay.style.display = "flex";
        }
    },
    closeQuickGuide() {
        const overlay = Utils.getElement("quickGuideOverlay", false);
        if (overlay) overlay.style.display = "none";
        localStorage.setItem("guideShown", "1");
    }
};

// ===== „Éï„Ç©„Éº„É†ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const FormManager = {
    setupBirthdaySelects() {
        const yearSelect = Utils.getElement('birthYear');
        const monthSelect = Utils.getElement('birthMonth');
        const currentYear = new Date().getFullYear();
        for (let y = currentYear - 18; y >= currentYear - 80; y--) yearSelect.add(new Option(`${y}Âπ¥`, y));
        for (let m = 1; m <= 12; m++) monthSelect.add(new Option(`${m}Êúà`, m));
        [yearSelect, monthSelect].forEach(el => el.addEventListener('change', () => this.updateAgeDisplay()));
    },
    updateAgeDisplay() {
        UIManager.clearError('birthDate');
        const year = Utils.getElement('birthYear').value;
        const month = Utils.getElement('birthMonth').value;
        const ageDisplay = Utils.getElement('ageDisplay');
        if (year && month) {
            const birthDate = new Date(year, month - 1, 1);
            const age = Utils.calculateAge(birthDate);
            if (age !== null) {
                Utils.getElement('currentAge').textContent = age;
                ageDisplay.style.display = 'block';
                appState.basicInfo.birthday = birthDate.toISOString().split('T')[0];
                PensionManager.adjustByAge(age);
            }
        } else {
            ageDisplay.style.display = 'none';
        }
        this.autoSave();
    },
    restoreFormData() {
        if (appState.financialPersonality) {
            const radio = document.querySelector(`input[name="financialPersonality"][value="${appState.financialPersonality}"]`);
            if (radio) radio.checked = true;
        }
        if (appState.basicInfo.birthday) {
            const d = new Date(appState.basicInfo.birthday);
            Utils.getElement('birthYear').value = d.getFullYear();
            Utils.getElement('birthMonth').value = d.getMonth() + 1;
            this.updateAgeDisplay();
        }
        Utils.getElement('income').value = appState.basicInfo.income;
        Utils.getElement('occupation').value = appState.basicInfo.occupation;
        
        Object.keys(appState.basicInfo).forEach(key => {
            if (key.includes('Pension')) {
                const el = Utils.getElement(key, false);
                if(el) el.value = appState.basicInfo[key];
                const slider = Utils.getElement(key.replace('Years', 'Slider'), false);
                if(slider) slider.value = appState.basicInfo[key];
            }
        });
        PensionManager.calculate();

        FixedCostManager.render();
        LifeEventManager.render();
        CustomEventManager.render();
        
        Object.keys(appState.advancedSettings).forEach(key => {
            const el = Utils.getElement(key, false);
            if (el) el.value = appState.advancedSettings[key];
        });

        Object.keys(appState.detailSettings).forEach(key => {
            const el = Utils.getElement(key, false);
            if (el) el.value = appState.detailSettings[key];
        });

        if (appState.results && appState.results.yearlyData && appState.results.yearlyData.length > 0) {
            UIManager.showStep(5);
            ResultsManager.render();
            UIManager.updatePlaceholders(true);
        }
    },
    autoSave() {
        Utils.debounce('autoSave', () => StorageManager.save(appState), 500);
    },
    saveCurrentStepData() {
        switch (appState.currentStep) {
            case 1: this.saveBasicInfo(); break;
            case 2: FixedCostManager.updateCosts(); break;
            case 3: this.saveLifeEvents(); break;
            case 4: this.saveAdvancedSettings(); break;
        }
        this.autoSave();
    },
    saveBasicInfo() {
        const personalityRadio = document.querySelector('input[name="financialPersonality"]:checked');
        appState.financialPersonality = personalityRadio ? personalityRadio.value : null;
        appState.basicInfo.income = Utils.parseNumber(Utils.getElement('income').value, null);
        appState.basicInfo.occupation = Utils.getElement('occupation').value;
    },
    saveLifeEvents() {
        if (appState.lifeEvents.children) appState.detailSettings.childrenCount = Utils.parseInt(Utils.getElement('childrenCount').value, 1);
        if (appState.lifeEvents.housing) appState.detailSettings.housingAge = Utils.parseInt(Utils.getElement('housingAge').value, 35);
        if (appState.lifeEvents.nisa) appState.detailSettings.nisaAmount = Utils.parseNumber(Utils.getElement('nisaAmount').value, 3.3);
    },
    saveAdvancedSettings() {
        appState.advancedSettings.retirementAge = Utils.parseInt(Utils.getElement('retirementAge').value, 65);
        appState.advancedSettings.expectedLifeExpectancy = Utils.parseInt(Utils.getElement('expectedLifeExpectancy').value, 95);
        appState.advancedSettings.investmentReturnRate = Utils.parseNumber(Utils.getElement('investmentReturnRate').value, 3.0);
    }
};

// ===== Âπ¥ÈáëÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const PensionManager = {
    setupInputs() {
        const fields = ['nationalPensionÂÆüÁ∏æ', 'nationalPension‰∫àÂÆö', 'employeePensionÂÆüÁ∏æ', 'employeePension‰∫àÂÆö'];
        fields.forEach(field => {
            const slider = Utils.getElement(`${field}Slider`);
            const input = Utils.getElement(`${field}Years`);
            slider.addEventListener('input', () => { input.value = slider.value; this.handleInput(field, slider.value); });
            input.addEventListener('input', () => { slider.value = input.value; this.handleInput(field, input.value); });
        });
        document.querySelectorAll('.pension-years-stepper').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const targetId = e.currentTarget.dataset.target;
                const step = Utils.parseInt(e.currentTarget.dataset.step);
                const input = Utils.getElement(targetId);
                const newValue = Utils.parseInt(input.value) + step;
                if (newValue >= input.min && newValue <= input.max) {
                    input.value = newValue;
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                }
            });
        });
    },
    handleInput(field, value) {
        appState.basicInfo[`${field}Years`] = Utils.parseInt(value);
        Utils.debounce('calculatePension', () => this.calculate(), 500);
        FormManager.autoSave();
    },
    adjustByAge(age) {
        const npFuture = Utils.getElement('nationalPension‰∫àÂÆöYears');
        const epFuture = Utils.getElement('employeePension‰∫àÂÆöYears');
        const retirementAge = appState.advancedSettings.retirementAge;

        npFuture.max = Math.max(0, 60 - age);
        npFuture.value = Math.min(Utils.parseInt(npFuture.value), npFuture.max);
        
        epFuture.max = Math.max(0, retirementAge - age);
        epFuture.value = Math.min(Utils.parseInt(epFuture.value), epFuture.max);
        
        this.calculate();
    },
    calculate() {
        const npYears = (appState.basicInfo.nationalPensionÂÆüÁ∏æYears || 0) + (appState.basicInfo.nationalPension‰∫àÂÆöYears || 0);
        const epYears = (appState.basicInfo.employeePensionÂÆüÁ∏æYears || 0) + (appState.basicInfo.employeePension‰∫àÂÆöYears || 0);
        const income = appState.basicInfo.income || 0;

        const npAmount = (816000 / 12) * (Math.min(npYears, 40) / 40);
        const avgReward = Math.min(Math.max(income * 1.35, 8.8), 65) * 10000;
        const epAmount = (epYears > 0 && income > 0) ? (avgReward * (5.481 / 1000) * (epYears * 12)) / 12 : 0;

        Utils.getElement('nationalPensionAmount').textContent = `${Math.round(npAmount).toLocaleString()}ÂÜÜ`;
        Utils.getElement('employeePensionAmount').textContent = `${Math.round(epAmount).toLocaleString()}ÂÜÜ`;
        Utils.getElement('totalPensionAmount').textContent = `${Math.round(npAmount + epAmount).toLocaleString()}ÂÜÜ`;
        Utils.getElement('pensionEstimate').style.display = 'block';
        
        // ‚òÖ‚òÖ‚òÖ ‰øÆÊ≠£ÁÇπ: Ë®àÁÆóÁµêÊûú„ÇíËøî„Åô ‚òÖ‚òÖ‚òÖ
        return { npAmount, epAmount };
    }
};

// ===== Âõ∫ÂÆöË≤ªÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const FixedCostManager = {
    render() {
        const container = Utils.getElement('fixedCostsGrid');
        container.innerHTML = APP_DATA.categories.map(cat => this.createCostItem(cat)).join('');
        APP_DATA.categories.forEach(cat => {
            const input = Utils.getElement(`cost-${cat.id}`);
            input.value = appState.fixedCosts[cat.id]?.amount > 0 ? appState.fixedCosts[cat.id].amount : '';
            input.addEventListener('input', () => Utils.debounce('updateFixedCosts', () => this.updateCosts(), 300));
        });
        this.updateCosts();
    },
    createCostItem(category) {
        return `
            <div class="fixed-cost-item">
                <div class="cost-icon">${category.icon}</div>
                <div class="cost-details">
                    <label for="cost-${category.id}" class="cost-name">${category.name}</label>
                    <p class="cost-description">${category.description}</p>
                </div>
                <div class="input-wrapper">
                    <input type="number" class="cost-input form-control" id="cost-${category.id}" placeholder="${category.placeholder}" min="0" max="${category.max}" step="0.1" aria-label="${category.name}„ÅÆÊúàÈ°ç">
                    <span class="input-unit">‰∏áÂÜÜ</span>
                </div>
            </div>`;
    },
    updateCosts() {
        let total = 0;
        APP_DATA.categories.forEach(cat => {
            const input = Utils.getElement(`cost-${cat.id}`);
            const amount = Utils.parseNumber(input.value, 0);
            appState.fixedCosts[cat.id] = { amount, isActive: amount > 0 };
            input.closest('.fixed-cost-item').classList.toggle('active', amount > 0);
            if (amount > 0) total = Utils.preciseAdd(total, amount);
        });

        Utils.getElement('totalFixedCosts').textContent = Utils.formatCurrency(total);
        const income = appState.basicInfo.income || 0;
        const ratio = income > 0 ? Utils.precisePercentage(total, income) : 0;
        Utils.getElement('fixedCostsRatio').textContent = `${ratio.toFixed(0)}%`;
        
        const adviceEl = Utils.getElement('ratioAdvice');
        if (ratio > 50) { adviceEl.textContent = 'üö® Âõ∫ÂÆöË≤ªÊØîÁéá„ÅåÈ´ò„Åô„Åé„Åæ„ÅôÔºÅË¶ãÁõ¥„Åó„ÇíÂº∑„ÅèÊé®Â•®„Åó„Åæ„Åô„ÄÇ'; adviceEl.className = 'ratio-advice advice-error';}
        else if (ratio > 40) { adviceEl.textContent = 'ü§î Âõ∫ÂÆöË≤ªÊØîÁéá„Åå„ÇÑ„ÇÑÈ´ò„ÇÅ„Åß„Åô„ÄÇË¶ãÁõ¥„Åó„ÅÆ‰ΩôÂú∞„Åå„ÅÇ„Çä„Åù„ÅÜ„Åß„Åô„ÄÇ'; adviceEl.className = 'ratio-advice advice-warning';}
        else { adviceEl.textContent = '‚úÖ ÁêÜÊÉ≥ÁöÑ„Å™Âõ∫ÂÆöË≤ªÊØîÁéá„Åß„ÅôÔºÅ'; adviceEl.className = 'ratio-advice advice-good';}
    }
};

// ===== „É©„Ç§„Éï„Ç§„Éô„É≥„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const LifeEventManager = {
    render() {
        const container = Utils.getElement('lifeEventsGrid');
        container.innerHTML = APP_DATA.lifeEvents.map(event => this.createEventItem(event)).join('');
        container.querySelectorAll('.life-event-item').forEach(item => {
            item.addEventListener('click', () => this.toggleEvent(item.dataset.eventKey, item));
        });
        this.updateDetailSettingsVisibility();
    },
    createEventItem(event) {
        const selected = appState.lifeEvents[event.key];
        return `
            <div class="life-event-item ${selected ? 'selected' : ''}" data-event-key="${event.key}" role="button" tabindex="0">
                <div class="event-icon">${event.icon}</div>
                <div class="event-content">
                    <div class="event-text">${event.text}</div>
                    <div class="event-description">${event.description}</div>
                </div>
                <div class="toggle-switch ${selected ? 'active' : ''}"><div class="toggle-slider"></div></div>
            </div>`;
    },
    toggleEvent(key, item) {
        appState.lifeEvents[key] = !appState.lifeEvents[key];
        item.classList.toggle('selected');
        item.querySelector('.toggle-switch').classList.toggle('active');
        this.updateDetailSettingsVisibility();
        FormManager.autoSave();
    },
    updateDetailSettingsVisibility() {
        APP_DATA.lifeEvents.forEach(event => {
            if (event.hasDetail) {
                const group = Utils.getElement(event.detailSettingKey);
                group.style.display = appState.lifeEvents[event.key] ? 'block' : 'none';
            }
        });
    }
};

// ===== „Ç´„Çπ„Çø„É†„É©„Ç§„Éï„Ç§„Éô„É≥„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const CustomEventManager = {
    setup() {
        Utils.getElement('addCustomEventButton').addEventListener('click', () => this.showForm());
        Utils.getElement('cancelCustomEventButton').addEventListener('click', () => this.hideForm());
        Utils.getElement('saveCustomEventButton').addEventListener('click', () => this.saveEvent());
        Utils.getElement('customLifeEventsList').addEventListener('click', e => {
            const item = e.target.closest('.custom-event-item');
            if (!item) return;
            const id = item.dataset.id;
            if (e.target.closest('.edit-custom-event')) this.showForm(id);
            if (e.target.closest('.delete-custom-event')) this.deleteEvent(id);
        });
        this.render();
    },
    render() {
        const list = Utils.getElement('customLifeEventsList');
        const placeholder = Utils.getElement('customEventsPlaceholder');
        list.innerHTML = '';
        if (appState.customLifeEvents.length === 0) {
            placeholder.style.display = 'flex';
        } else {
            placeholder.style.display = 'none';
            appState.customLifeEvents.forEach(event => list.appendChild(this.createEventItem(event)));
        }
    },
    createEventItem(event) {
        const item = document.createElement('div');
        item.className = 'custom-event-item';
        item.dataset.id = event.id;
        item.innerHTML = `
            <div class="custom-event-details">
                <strong>${event.name}</strong>: ${Utils.formatCurrency(event.amount)} (${event.age}Ê≠≥ÊôÇ)
            </div>
            <div class="custom-event-actions">
                <button type="button" class="btn btn--secondary edit-custom-event" aria-label="Á∑®ÈõÜ"><svg class="btn-icon"><use xlink:href="#icon-edit"></use></svg></button>
                <button type="button" class="btn btn--secondary delete-custom-event" aria-label="ÂâäÈô§"><svg class="btn-icon"><use xlink:href="#icon-trash"></use></svg></button>
            </div>`;
        return item;
    },
    showForm(id = null) {
        this.resetForm();
        if (id) {
            const event = appState.customLifeEvents.find(e => e.id === id);
            Utils.getElement('customEventId').value = event.id;
            Utils.getElement('customEventName').value = event.name;
            Utils.getElement('customEventAmount').value = event.amount;
            Utils.getElement('customEventAge').value = event.age;
        }
        Utils.getElement('customEventFormContainer').style.display = 'block';
        Utils.getElement('addCustomEventButton').style.display = 'none';
    },
    hideForm() {
        Utils.getElement('customEventFormContainer').style.display = 'none';
        Utils.getElement('addCustomEventButton').style.display = 'inline-flex';
    },
    resetForm() {
        ['customEventId', 'customEventName', 'customEventAmount', 'customEventAge'].forEach(id => {
            Utils.getElement(id).value = '';
            UIManager.clearError(id);
        });
    },
    saveEvent() {
        const id = Utils.getElement('customEventId').value;
        const name = Utils.getElement('customEventName').value;
        const amount = Utils.parseNumber(Utils.getElement('customEventAmount').value);
        const age = Utils.parseInt(Utils.getElement('customEventAge').value);
        
        if (!name || amount <= 0 || age <= 0) {
            NotificationManager.show('„Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„ÇíÊ≠£„Åó„ÅèÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 'error');
            return;
        }

        if (id) {
            const index = appState.customLifeEvents.findIndex(e => e.id === id);
            appState.customLifeEvents[index] = { id, name, amount, age };
        } else {
            appState.customLifeEvents.push({ id: Utils.generateId(), name, amount, age });
        }
        this.render();
        this.hideForm();
        FormManager.autoSave();
    },
    deleteEvent(id) {
        if (confirm('„Åì„ÅÆÊîØÂá∫„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
            appState.customLifeEvents = appState.customLifeEvents.filter(e => e.id !== id);
            this.render();
            FormManager.autoSave();
        }
    }
};

// ===== „Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const StepValidator = {
    validateStep(stepNumber) {
        let isValid = true;
        const clearAndSetError = (id, message) => {
            UIManager.clearError(id);
            UIManager.showError(id, message);
            isValid = false;
        };

        const stepContainer = document.querySelector(`#step${stepNumber}`);
        if (stepContainer) {
            stepContainer.querySelectorAll('.input-error-message').forEach(el => el.style.display = 'none');
            stepContainer.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
        }

        switch (stepNumber) {
            case 1:
                if (!appState.financialPersonality) clearAndSetError('financialPersonality', '‰æ°ÂÄ§Ë¶≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
                if (!appState.basicInfo.birthday) clearAndSetError('birthDate', 'ÁîüÂπ¥ÊúàÊó•„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
                if (!appState.basicInfo.income) clearAndSetError('income', 'ÊâãÂèñ„ÇäÂèéÂÖ•„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
                if (!appState.basicInfo.occupation) clearAndSetError('occupation', 'ËÅ∑Ê•≠„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
                break;
        }
        return isValid;
    }
};

// ===== „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const NavigationManager = {
    nextStep() {
        FormManager.saveCurrentStepData();
        if (!StepValidator.validateStep(appState.currentStep)) {
            NotificationManager.show('ÂÖ•ÂäõÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
            return;
        }
        if (appState.currentStep < 5) {
            appState.farthestValidatedStep = Math.max(appState.farthestValidatedStep, appState.currentStep + 1);
            UIManager.showStep(appState.currentStep + 1);
        }
    },
    previousStep() {
        if (appState.currentStep > 1) UIManager.showStep(appState.currentStep - 1);
    },
    goToStep(targetStep) {
        if (targetStep <= appState.farthestValidatedStep) UIManager.showStep(targetStep);
    }
};

// ===== Ë®àÁÆó„Ç®„É≥„Ç∏„É≥ =====
const CalculationEngine = {
    async calculate() {
        FormManager.saveCurrentStepData();
        UIManager.showLoading();
        await new Promise(resolve => setTimeout(resolve, APP_CONFIG.CALCULATION_DELAY));

        try {
            const results = this.performCalculation();
            appState.results = results;
            UIManager.hideLoading();
            UIManager.showStep(5);
            ResultsManager.render();
            UIManager.updatePlaceholders(true);
            FormManager.autoSave();
        } catch (error) {
            UIManager.hideLoading();
            Utils.handleError(error, 'Calculation');
        }
    },
    performCalculation() {
        const currentAge = Utils.calculateAge(appState.basicInfo.birthday);
        const { retirementAge, expectedLifeExpectancy, investmentReturnRate } = appState.advancedSettings;
        const invRate = investmentReturnRate / 100;
        
        // ‚òÖ‚òÖ‚òÖ ‰øÆÊ≠£ÁÇπ: PensionManager.calculate()„Åã„ÇâÂÄ§„ÇíÂèó„ÅëÂèñ„Çã ‚òÖ‚òÖ‚òÖ
        const pensionAmounts = PensionManager.calculate(); 
        const totalPensionAmount = (pensionAmounts.npAmount || 0) + (pensionAmounts.epAmount || 0);

        let cashBalance = 0, nisaBalance = 0, totalIncome = 0, totalExpenses = 0, nisaFinalContribution = 0;
        let yearlyData = [];

        for (let age = currentAge; age <= expectedLifeExpectancy; age++) {
            const isRetired = age >= retirementAge;
            const income = isRetired ? (totalPensionAmount * 12) : (appState.basicInfo.income * 12);
            
            let cashExpense = Object.values(appState.fixedCosts).reduce((sum, cost) => sum + (cost.amount * 12), 0);
            
            let eventCost = 0;
            appState.customLifeEvents.forEach(e => { if(e.age === age) eventCost += e.amount; });
            
            if (appState.lifeEvents.housing && age === appState.detailSettings.housingAge) {
                eventCost += APP_DATA.lifeEvents.find(e=>e.key==='housing').cost;
            }
            if(appState.lifeEvents.children && appState.detailSettings.childrenCount > 0) {
                 const firstChildAge = Math.max(currentAge + 2, 30);
                 for (let i = 0; i < appState.detailSettings.childrenCount; i++) {
                    const childBirthAge = firstChildAge + (i * 3);
                    const childsCurrentAge = age - childBirthAge;
                    if(childsCurrentAge >= 0 && childsCurrentAge < 22){
                        eventCost += (APP_DATA.lifeEvents.find(e=>e.key==='children').cost / appState.detailSettings.childrenCount) / 22;
                    }
                 }
            }
            cashExpense += eventCost;

            let nisaInvestment = 0;
            if (appState.lifeEvents.nisa && !isRetired) {
                nisaInvestment = appState.detailSettings.nisaAmount * 12;
                nisaFinalContribution += nisaInvestment;
            }
            
            nisaBalance = (nisaBalance + nisaInvestment) * (1 + invRate);
            const netCashFlow = income - cashExpense - nisaInvestment;
            cashBalance += netCashFlow;

            totalIncome += income;
            totalExpenses += cashExpense;

            yearlyData.push({ age, income, cashExpense, nisaInvestment, cumulativeCash: cashBalance, nisaBalance, totalAssets: cashBalance + nisaBalance });
        }
        
        const finalBalance = cashBalance + nisaBalance;
        const retirementData = yearlyData.find(d => d.age === retirementAge);

        return {
            totalIncome, totalExpenses, finalBalance,
            retirementAssets: retirementData ? retirementData.totalAssets : 0,
            nisaFinalContribution, nisaFinalBalance: nisaBalance,
            yearlyData,
            rating: this.calculateRating(finalBalance, totalIncome, expectedLifeExpectancy - currentAge)
        };
    },
    calculateRating(finalBalance, totalIncome, years) {
        if (years <= 0) return 'D';
        const avgAnnualIncome = totalIncome / years;
        if (finalBalance < -500) return 'D';
        if (finalBalance < 0) return 'C';
        if (finalBalance < (avgAnnualIncome * 2)) return 'B';
        if (finalBalance < (avgAnnualIncome * 5)) return 'A';
        return 'S';
    }
};

// ===== ÁµêÊûúÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
const ResultsManager = {
    render() {
        this.renderRatingAndSummary();
        this.renderSummaryCards();
        this.renderChart();
        this.renderAdvice();
    },
    renderRatingAndSummary() {
        const { rating, finalBalance } = appState.results;
        const ratingMap = {
            'S': { text: 'S', class: 'rating-s', msg: 'Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅ' }, 'A': { text: 'A', class: 'rating-a', msg: 'ËâØÂ•Ω„Åß„ÅôÔºÅ' },
            'B': { text: 'B', class: 'rating-b', msg: '„Åæ„Åö„Åæ„Åö„Åß„Åô„ÄÇ' }, 'C': { text: 'C', class: 'rating-c', msg: 'Ë¶ÅÊ≥®ÊÑè„ÄÇ' },
            'D': { text: 'D', class: 'rating-d', msg: 'Âç±Èô∫Ê∞¥Âüü„ÄÇ' }
        };
        const currentRating = ratingMap[rating];
        Utils.getElement('ratingDisplay').innerHTML = `<div class="rating-badge ${currentRating.class}">${currentRating.text}</div>`;
        Utils.getElement('resultsMainSummary').innerHTML = `ÊúÄÁµÇÁöÑ„Å´ <strong>${Utils.formatCurrency(finalBalance)}</strong> „ÅÆË≥áÁî£„ÅåË¶ãËæº„Åæ„Çå„Åæ„Åô„ÄÇ${currentRating.msg}`;
    },
    renderSummaryCards() {
        const container = Utils.getElement('resultsSummaryCards');
        const { totalIncome, totalExpenses, finalBalance, retirementAssets } = appState.results;
        const cards = [
            { icon: 'üí∞', label: 'ÁîüÊ∂ØÁ∑èÂèéÂÖ•', value: totalIncome, positive: true },
            { icon: 'üí∏', label: 'ÁîüÊ∂ØÁ∑èÊîØÂá∫', value: totalExpenses, positive: false },
            { icon: 'üè¶', label: 'ÊúÄÁµÇË≥áÁî£', value: finalBalance, positive: finalBalance >= 0 },
            { icon: 'üë¥', label: 'ÈÄÄËÅ∑ÊôÇË≥áÁî£', value: retirementAssets, positive: retirementAssets >= 0 }
        ];
        container.innerHTML = cards.map(c => `
            <div class="result-card">
                <div class="result-icon">${c.icon}</div>
                <div class="result-label">${c.label}</div>
                <div class="result-value ${c.positive ? 'positive' : 'negative'}">${Utils.formatCurrency(c.value)}</div>
            </div>`).join('');
    },
    renderChart() {
        const ctx = Utils.getElement('lifetimeChart').getContext('2d');
        if (lifetimeChart) lifetimeChart.destroy();
        const { yearlyData } = appState.results;
        const labels = yearlyData.map(d => `${d.age}Ê≠≥`);
        const datasets = [
            { label: 'Á∑èË≥áÁî£', data: yearlyData.map(d => d.totalAssets), borderColor: 'rgba(37, 99, 235, 1)', backgroundColor: 'rgba(37, 99, 235, 0.2)', fill: true, tension: 0.3 },
            { label: 'ÁèæÈáëÊÆãÈ´ò', data: yearlyData.map(d => d.cumulativeCash), borderColor: 'rgba(245, 158, 11, 1)', backgroundColor: 'rgba(245, 158, 11, 0.1)', fill: false, borderDash: [5, 5] },
        ];
        if (appState.lifeEvents.nisa) {
            datasets.push({ label: 'NISAË©ï‰æ°È°ç', data: yearlyData.map(d => d.nisaBalance), borderColor: 'rgba(16, 185, 129, 1)', backgroundColor: 'rgba(16, 185, 129, 0.1)', fill: false });
            Utils.getElement('lifetimeChart').closest('.chart-section').querySelector('.nisa-legend').style.display = 'flex';
        }
        lifetimeChart = new Chart(ctx, {
            type: 'line', data: { labels, datasets },
            options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } } }
        });
    },
    renderAdvice() {
        const container = Utils.getElement('adviceContent');
        container.innerHTML = '';
        this._addAdvice(container, this.getOverallAdvice());
        if (Object.values(appState.fixedCosts).reduce((s, c) => s + c.amount, 0) > (appState.basicInfo.income * 0.5))
            this._addAdvice(container, { type: 'warning', msg: '<strong>Âõ∫ÂÆöË≤ª:</strong> ÂèéÂÖ•„Å´ÂØæ„Åô„ÇãÂõ∫ÂÆöË≤ª„ÅÆÂâ≤Âêà„Åå50%„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇÂÆ∂Ë®à„ÅÆË¶ãÁõ¥„Åó„ÇíÂº∑„ÅèÊé®Â•®„Åó„Åæ„Åô„ÄÇ' });
        if (!appState.lifeEvents.nisa)
            this._addAdvice(container, { type: 'info', msg: '<strong>ÊäïË≥á:</strong> NISA„Å™„Å©„ÅÆÁ©çÁ´ãÊäïË≥á„ÅåË®àÁîª„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Ç§„É≥„Éï„É¨ÂØæÁ≠ñ„Å®„Åó„Å¶Â∞ëÈ°ç„Åã„Çâ„Åß„ÇÇÂßã„ÇÅ„Çã„Åì„Å®„ÇíÊ§úË®é„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ' });
        this._addAdvice(container, this.getPersonalityAdvice());
    },
    _addAdvice(container, {type, msg}) {
        const item = document.createElement('div');
        item.className = `advice-item type-${type}`;
        item.innerHTML = `<div>${msg}</div>`;
        container.appendChild(item);
    },
    getOverallAdvice() {
        const { rating } = appState.results;
        const personality = appState.financialPersonality || 'security';
        const keywords = APP_DATA.personalityTypes[personality].keywords;
        const messages = {
            S: `<strong>Á∑èÂêàË©ï‰æ° (S): Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅ</strong> „ÅÇ„Å™„Åü„ÅÆÁêÜÊÉ≥„Å®„Åô„Çã„Äå${keywords[0]}„Äç„ÅÆ„ÅÇ„ÇãÊú™Êù•„ÅåÊúüÂæÖ„Åß„Åç„Åæ„Åô„ÄÇÁõ§Áü≥„Å™Ë®àÁîª„Åß„Åô„ÄÇ`,
            A: `<strong>Á∑èÂêàË©ï‰æ° (A): ËâØÂ•Ω„Åß„Åô„ÄÇ</strong> „ÅÇ„Å™„Åü„ÅåÂ§ßÂàá„Å´„Åô„Çã„Äå${keywords[0]}„Äç„ÇíÂÆüÁèæ„Åô„ÇãÂúüÂè∞„ÅØ„Åó„Å£„Åã„ÇäÁØâ„Åã„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åì„ÅÆË™øÂ≠ê„Åß„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ`,
            B: `<strong>Á∑èÂêàË©ï‰æ° (B): „Åæ„Åö„Åæ„Åö„Åß„Åô„ÄÇ</strong> „ÅÇ„Å™„Åü„ÅÆÁõÆÊ®ô„Åß„ÅÇ„Çã„Äå${keywords[0]}„Äç„ÅÆ„Åü„ÇÅ„Å´„ÅØ„ÄÅ„ÇÇ„ÅÜÂ∞ë„ÅóÂ∑•Â§´„ÅåÂøÖË¶Å„Åß„Åô„ÄÇÊîπÂñÑ„ÅÆ‰ΩôÂú∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ`,
            C: `<strong>Á∑èÂêàË©ï‰æ° (C): Ê≥®ÊÑè„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ</strong> „Åì„ÅÆ„Åæ„Åæ„Åß„ÅØ„ÄÅ„ÅÇ„Å™„Åü„ÅÆÊúõ„ÇÄ„Äå${keywords[0]}„Äç„ÇíÈÅîÊàê„Åô„Çã„ÅÆ„ÅØÈõ£„Åó„ÅÑ„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„ÄÇË®àÁîª„ÇíË¶ãÁõ¥„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ`,
            D: `<strong>Á∑èÂêàË©ï‰æ° (D): Âç±Èô∫„Å™Áä∂ÊÖã„Åß„Åô„ÄÇ</strong> Êó©ÊÄ•„Å™ÂØæÁ≠ñ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇÂ∞ÜÊù•„ÅÆ„Äå${keywords[0]}„Äç„ÅåÂç±„Å∂„Åæ„Çå„Åæ„Åô„ÄÇÂ∞ÇÈñÄÂÆ∂„Å∏„ÅÆÁõ∏Ë´á„ÇÇÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
        };
        const type = rating >= 'C' ? 'good' : 'warning';
        return { type, msg: messages[rating] };
    },
    getPersonalityAdvice() {
        const personality = appState.financialPersonality || 'security';
        const messages = {
            security: `<strong>„ÅÇ„Å™„Åü„Å∏ (ÂÆâÂÆöÈáçË¶ñÂûã):</strong> Â∞ÜÊù•„ÅÆÂÆâÂøÉ„ÇíÁ¢∫ÂÆü„Å´„Åô„ÇãÁ¥†Êô¥„Çâ„Åó„ÅÑË®àÁîª„Åß„Åô„ÄÇ„É™„Çπ„ÇØ„ÅÆ‰Ωé„ÅÑÂÄã‰∫∫Âêë„ÅëÂõΩÂÇµ„ÇÑiDeCo„ÅÆÊ¥ªÁî®„ÇÇÊ§úË®é„Åó„ÄÅ„Åï„Çâ„Å™„ÇãÂÆâÂÆö„ÇíÁõÆÊåá„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ`,
            growth: `<strong>„ÅÇ„Å™„Åü„Å∏ (Ëá™Â∑±ÊäïË≥áÂûã):</strong> „Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó„Å∏„ÅÆÊäïË≥á„ÅØ„ÄÅÂ∞ÜÊù•„ÅÆÂèéÂÖ•Â¢ó„Å´Áπã„Åå„Çä„ÄÅÁµêÊûú„Å®„Åó„Å¶„ÅÇ„Å™„Åü„ÅÆÂèØËÉΩÊÄß„ÇíÂ∫É„Åí„Åæ„Åô„ÄÇË®àÁîª„Å´„ÄåËá™Â∑±ÊäïË≥áË≤ª„Äç„ÇíÂÖ∑‰ΩìÁöÑ„Å´ÁµÑ„ÅøËæº„Åø„ÄÅ„É™„Çø„Éº„É≥„ÇíÊúÄÂ§ßÂåñ„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ`,
            freedom: `<strong>„ÅÇ„Å™„Åü„Å∏ (ÁèæÂú®ÂøóÂêëÂûã):</strong> „Äå‰ªä„Äç„ÇíÊ•Ω„Åó„ÇÄ„Åü„ÇÅ„ÅÆÁµåÊ∏àÂü∫Áõ§„ÇíÁØâ„Åë„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Äå„Ç´„Çπ„Çø„É†„É©„Ç§„Éï„Ç§„Éô„É≥„Éà„Äç„Åß„ÇÑ„Çä„Åü„ÅÑ„Åì„Å®„ÇíÂÖ∑‰ΩìÁöÑ„Å´Ë®àÁîª„Åó„ÄÅ‰∫∫Áîü„Çí„Åï„Çâ„Å´Ë±ä„Åã„Å´„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ`,
            contribution: `<strong>„ÅÇ„Å™„Åü„Å∏ (Ë≤¢ÁåÆ„ÉªÂÆ∂ÊóèÂûã):</strong> Â§ßÂàá„Å™‰∫∫„Å®„ÅÆÊôÇÈñì„ÇíÂÆà„Çã„Åü„ÇÅ„ÅÆË®àÁîª„Åå„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÄÇÂÆ∂Êóè„ÇÑÁ§æ‰ºö„Å∏„ÅÆÊÉ≥„ÅÑ„ÇíÂΩ¢„Å´„Åô„Çã„Åü„ÇÅ„ÄÅÁîüÂëΩ‰øùÈô∫„ÇÑÁõ∏Á∂öÂØæÁ≠ñ„ÄÅÂØÑ‰ªò„Å™„Å©„ÇÇË¶ñÈáé„Å´ÂÖ•„Çå„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ`
        };
        return { type: 'info', msg: messages[personality] };
    }
};

// ===== „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞ („Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©) =====
function nextStep() { NavigationManager.nextStep(); }
function prevStep() { NavigationManager.previousStep(); }
function calculateResults() { CalculationEngine.calculate(); }
function resetApp() { if (confirm('ÂÖ•Âäõ„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô„ÅãÔºü')) { StorageManager.clear(); location.reload(); } }
function saveSettings() { FormManager.autoSave(); NotificationManager.show('Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'success'); }
function scrollToAdvice() { Utils.scrollToElement(Utils.getElement('advice-section'), 80); }
function exportResults() { /* ...ÂÆüË£Ö ... */ }
function downloadChartImage() { if (lifetimeChart) { const a = document.createElement('a'); a.href = lifetimeChart.toBase64Image(); a.download = 'my-chart.png'; a.click(); } }
function shareResults() { /* ...ÂÆüË£Ö ... */ }
function closeQuickGuide() { UIManager.closeQuickGuide(); }

// ===== „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ =====
const AppInitializer = {
    init() {
        this.loadData();
        this.setupUI();
        this.setupEventListeners();
        UIManager.showQuickGuide();
    },
    loadData() {
        const saved = StorageManager.load();
        if (saved) {
            const defaultState = new AppState();
            appState = {
                ...defaultState,
                ...saved,
                basicInfo: { ...defaultState.basicInfo, ...saved.basicInfo },
                fixedCosts: { ...defaultState.fixedCosts, ...saved.fixedCosts },
                lifeEvents: { ...defaultState.lifeEvents, ...saved.lifeEvents },
                customLifeEvents: saved.customLifeEvents || [],
                detailSettings: { ...defaultState.detailSettings, ...saved.detailSettings },
                advancedSettings: { ...defaultState.advancedSettings, ...saved.advancedSettings },
            };
        }
    },
    setupUI() {
        FormManager.setupBirthdaySelects();
        PensionManager.setupInputs();
        CustomEventManager.setup();
        FormManager.restoreFormData();
        UIManager.showStep(appState.currentStep);
    },
    setupEventListeners() {
        document.querySelectorAll('.step-label').forEach(l => l.addEventListener('click', () => NavigationManager.goToStep(Utils.parseInt(l.dataset.step))));
        document.querySelectorAll('input[name="financialPersonality"]').forEach(r => r.addEventListener('change', e => {
            appState.financialPersonality = e.target.value;
            FormManager.autoSave();
            UIManager.clearError('financialPersonality');
        }));
        ['income', 'occupation', 'childrenCount', 'housingAge', 'nisaAmount', 'retirementAge', 'expectedLifeExpectancy', 'investmentReturnRate']
            .forEach(id => {
                const el = Utils.getElement(id, false);
                if (el) el.addEventListener('input', () => FormManager.saveCurrentStepData());
            });
    }
};

document.addEventListener('DOMContentLoaded', () => {
    try {
        AppInitializer.init();
    } catch (e) {
        console.error("Fatal Error:", e);
        document.body.innerHTML = '<h1>„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆËµ∑Âãï„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</h1>';
    }
});